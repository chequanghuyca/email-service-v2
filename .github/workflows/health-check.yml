name: Health Check & Monitoring

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  health-check:
    name: Health Check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment:
          - name: Production
            url: https://email-service-v2.fly.dev
          - name: Staging
            url: https://email-service-v2-staging.fly.dev

    steps:
      - name: Check ${{ matrix.environment.name }} Health
        id: health-check
        run: |
          echo "Checking ${{ matrix.environment.name }} health..."

          # Check main API endpoint
          if curl -f -s "${{ matrix.environment.url }}/api" > /dev/null; then
            echo "${{ matrix.environment.name }} API is healthy"
            echo "api_status=healthy" >> $GITHUB_OUTPUT
          else
            echo " ${{ matrix.environment.name }} API is down"
            echo "api_status=down" >> $GITHUB_OUTPUT
          fi

          # Check Swagger docs
          if curl -f -s "${{ matrix.environment.url }}/api/docs" > /dev/null; then
            echo "${{ matrix.environment.name }} Swagger docs are accessible"
            echo "docs_status=healthy" >> $GITHUB_OUTPUT
          else
            echo "${{ matrix.environment.name }} Swagger docs are not accessible"
            echo "docs_status=down" >> $GITHUB_OUTPUT
          fi

      - name: Report Status
        run: |
          echo "## ${{ matrix.environment.name }} Health Report" >> $GITHUB_STEP_SUMMARY
          echo "- **API Status**: ${{ steps.health-check.outputs.api_status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docs Status**: ${{ steps.health-check.outputs.docs_status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ matrix.environment.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Create Issue on Failure
        if: steps.health-check.outputs.api_status == 'down'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `${{ matrix.environment.name }} Service Down`;
            const body = `
            ## Service Health Alert

            **Environment**: ${{ matrix.environment.name }}
            **URL**: ${{ matrix.environment.url }}
            **Status**: API is not responding
            **Time**: ${new Date().toISOString()}

            ### Immediate Actions Required:
            1. Check Fly.io dashboard for service status
            2. Review application logs: \`flyctl logs -a email-service-v2\`
            3. Verify deployment status
            4. Check resource usage and scaling

            ### Quick Commands:
            \`\`\`bash
            # Check app status
            flyctl status -a email-service-v2

            # View logs
            flyctl logs -a email-service-v2

            # Restart if needed
            flyctl apps restart email-service-v2
            \`\`\`

            This issue was automatically created by the health check workflow.
            `;

            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['service-down', '${{ matrix.environment.name }}'],
              state: 'open'
            });

            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['service-down', '${{ matrix.environment.name }}', 'urgent']
              });
            }
