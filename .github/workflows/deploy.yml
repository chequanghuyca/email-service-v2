name: Deploy to Fly.io

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  # Job 1: Run tests and linting
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linter
        run: bun run lint

      - name: Run tests
        run: bun run test

      - name: Build application
        run: bun run build

  # Job 2: Deploy to staging (develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to staging
        run: |
          # Create staging app if it doesn't exist
          flyctl apps list | grep -q "email-service-v2-staging" || flyctl apps create email-service-v2-staging

          # Update fly.toml for staging
          sed 's/app = "email-service-v2"/app = "email-service-v2-staging"/' fly.toml > fly-staging.toml

          # Deploy to staging
          flyctl deploy --config fly-staging.toml --app email-service-v2-staging

  # Job 3: Deploy to production (main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to production
        run: flyctl deploy --app email-service-v2

  # Job 4: Preview deployment for PRs
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy preview
        run: |
          # Create unique preview app name
          PREVIEW_APP="email-service-v2-pr-${{ github.event.number }}"

          # Create preview app if it doesn't exist
          flyctl apps list | grep -q "$PREVIEW_APP" || flyctl apps create "$PREVIEW_APP"

          # Update fly.toml for preview
          sed "s/app = \"email-service-v2\"/app = \"$PREVIEW_APP\"/" fly.toml > fly-preview.toml

          # Deploy preview
          flyctl deploy --config fly-preview.toml --app "$PREVIEW_APP"

          # Comment on PR with preview URL
          echo "Preview deployed at: https://$PREVIEW_APP.fly.dev" >> $GITHUB_STEP_SUMMARY

  # Job 5: Cleanup preview apps when PR is closed
  cleanup-preview:
    name: Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Destroy preview app
        run: |
          PREVIEW_APP="email-service-v2-pr-${{ github.event.number }}"
          flyctl apps destroy "$PREVIEW_APP" --yes || true
